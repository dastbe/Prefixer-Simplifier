%{
	// Bison parser generator for the expression language
	//
	// Created by: David Bell
	// April 26th, 2012

	#include "stdio.h"
	#include "expr_tree.h"
	#define YYSTYPE ExprTree*

    extern ExprTree *et;

	int yylex(void);
	void yyerror(const char *);
%}

%token
NUMBER
ID

TIMES
DIVIDE
MINUS
PLUS

OPENPAREN
CLOSEPAREN


/* Arithmetic rules */

%left PLUS MINUS
%left TIMES DIVIDE 
%right UMINUS

%%

/* Start Symbol */
S	: Expr { et = new Root($1); }
	;

/* Arithmetic Expressions. Precedence is handled above */
Expr    : MINUS Expr %prec UMINUS { $$ = new UMinus($2); } 
		| Expr TIMES Expr { $$ = new Times($1,$3); }
		| Expr DIVIDE Expr { $$ = new Div($1,$3); }
        | Expr PLUS Expr { $$ = new Plus($1,$3); }
        | Expr MINUS Expr { $$ = new Minus($1,$3); }
        | NUMBER { $$ = $1; }
		| ID { $$ = $1; }
        | OPENPAREN Expr CLOSEPAREN { $$ = $2; }
        ;

%%

void yyerror(const char *s) {
	printf("Error on %s\n",s);
}